name: Docker

on:
  push:
    branches:
      - master    # Will be `dev`
    tags:
      - v*        # Publish `v1.2.3` tags as releases.

  pull_request:   # Run tests for any PRs.


env:
  DOCKER_REPO: max06net/base-gui

jobs:
  test:           # See also https://docs.docker.com/docker-hub/builds/automated-testing/
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  build:
    runs-on: ubuntu-latest

    needs: test   # Ensure test job passes before pushing image.
    #if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        os: [buster-slim, buster]

    steps:
      - name: Dockerhub Login
        uses: docker/login-action@v1.10.0
        with:
          username: max06net
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine version
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && echo "VERSION=$(echo $VERSION | sed -e 's/^v//')" >> $GITHUB_ENV

          # "dev" if not a release, but in master
          [ "$VERSION" == "merge" ] && echo "VERSION=dev" >> $GITHUB_ENV

      - name: Build and push Docker images
        uses: docker/build-push-action@v2.5.0
        with:
          # List of build-time variables
          # build-args: # optional
          # platforms: # optional
          # Always attempt to pull a newer version of the image
          pull: true
          # Push is a shorthand for --output=type=registry
          push: false

          # List of tags
          tags: |
            ${{ join( [
              ${{ env.DOCKER_REPO }}:${{ env.VERSION }}-${{ matrix.os }},
              ${{ env.DOCKER_REPO }}:${{ matrix.os }} 
            ], ',' }}

        # env:
        #   OS: ${{ matrix.os }}



  # push:
  #   needs: test   # Ensure test job passes before pushing image.
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'
  #   permissions:
  #     contents: read
  #     packages: write

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Build image
  #       run: docker build . --file Dockerfile --tag $IMAGE_NAME

  #     - name: Log into registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      
  #     - name: Log into Dockerhub
  #       run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin

  #     - name: Push image to github registry
  #       run: |
  #         IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "master" ] && VERSION=dev

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION

  #     - name: Push image to dockerhub
  #       run: |
  #         IMAGE_ID=max06net/$IMAGE_NAME

  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "master" ] && VERSION=dev

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION
